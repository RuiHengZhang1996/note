单一服务器模式       登录



使用session对象实现，把用户数据放到session对象里面去

判断是否登录，从session获取数据，可以获取到是否登录   session.setAttribnute("user", user);
                                                  session.getAttribute("user");

但是项目很少是单一服务器

集群部署  部署在几个服务器上   实现登录----------------单点登录------------一个模块登录，别的模块不用

single sign on SSO ----------怎么做到


1. 
目前用的不是很多 

session广播机制实现： session的复制   第一个服务器登录，把登录之后的对象，复制到别的服务器，但是缺点非常明显，那如果有几十个服务器，就得复制几十次，会造成资源的极大浪
费




2. 
cookie + redis实现： 

cookie是一个客户端技术，存在浏览器中，每次发送请求，每次都带着cookie值发送。 

redis基于key value进行存储。


在项目中任何一个模块进行登录， 登录之后： 把数据放入两个地方

一个是 redis： 怎么放呢？ redis基于key value进行存储，在key里面放： 生成随机唯一值（根据ip，id或者uid等等生成）， 在value里面放用户数据


一个是cookie：把redis里面生成的key放入到cookie值里面

然后再访问项目中其他模块的时候， 发送请求带着cookie值进行发送， 获取cookie值，拿着cookie值做事情

从cookie获取到的值，到redis进行查询，根据key进行查询，如果查出数据就是登陆了


3. 
使用token实现

与第二种方式很像

token是啥？ token通俗点 就是按照一定的规则生成的字符串，字符串可以包含用户信息

例如： 192.1.1.1#lucy#2#，规则依照情景而定

在项目中某个模块进行登录，登录之后，按照规则生成字符串，把登陆之后用户包含到生成字符串里面，把字符串返回

这个字符串可以通过cookie返回，
也可以通过地址栏返回

再访问其他模块的时候，每次访问在地址栏带着生成字符串，在访问模块的时候获取地址栏的字符串，根据字符串获取用户信息（解码），获取到就是登陆了




小细节： session默认过期时间： 30min。 cookie redis （设置redis过期时间） 以及token （生成的时候也能设置）也可以做到过期，

