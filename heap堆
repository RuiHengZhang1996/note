package com.ruiheng.alglee.zuo;

public class Heap01 {
	
	public static class MyMaxHeap {
		private int[] heap; 
		
		private final int limit;
		private int heapSize;
		
		public MyMaxHeap(int limit) {
			heap = new int[limit];
			this.limit = limit;
			heapSize = 0;
		}
		
		public boolean isEmpty() {
			return heapSize == 0;
		}
		
		public boolean isFull() {
			return heapSize == limit;
			
		}
		
		public void push(int value) {
			if(heapSize==limit) {
				throw new RuntimeException("heap is Full");
			}
			heap[heapSize] = value;
			heapInsert(heap,heapSize ++);
		}
		
		public int pop() {
			int ans = heap[0];
			swap(heap, 0, --heapSize);
			heapify(heap, 0, heapSize);
			return ans;
		}
		
		private void heapInsert(int[] arr, int index) {
			while(arr[index] > arr[(index - 1)/2]) {
				//循环结束条件
				//不比父亲结点大了，index = 0 
				swap(arr, index, (index - 1)/2);// 父亲结点的位置
				index = (index - 1)/2;
			}
		}
		private void swap(int[] arr, int i, int j) {
			int temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
		
		//从index位置往下看，不断地下沉
		//下沉到孩子都不比我大就停止 或者没有孩子了
		private void heapify(int[] arr, int index, int heapSize) {
			int left = index *2 + 1;
			while(left < heapSize) {
				//左右两个孩子谁大
				//
				int largest = left + 1 < heapSize && arr[left + 1] > arr[left] ? left + 1: left;
				largest = arr[largest] > arr[index] ? largest: index;
				if(largest == index) {
					break;
				}
				swap(arr, largest, index); 
				index = largest; 
				left = index * 2 + 1;
				
			}
		}
	}
	
	public static class RightMaxHeap {
		private int[] arr;
		private final int limit;
		private int size;
		
		public RightMaxHeap(int limit) {
			arr = new int[limit];
			size = 0;
			this.limit = limit;
		}
		
		public boolean isEmpty() {
			return size == 0;
		}
		
		public boolean isFull() {
			return size == limit;
		}
		
		public void push(int value) {
			if(size == limit) {
				throw new RuntimeException("heap full");
			}
			arr[size++] = value;
		}
		
		public int pop() {
			int maxIndex = 0;
			for(int i = 0; i<size; i++) {
				if(arr[i] > arr[maxIndex]) {
					maxIndex = i;
				}
			}
			int ans = arr[maxIndex];
			arr[maxIndex] = arr[--size];
			return ans;
		}
		
	}
	
	
	
	int limit = 100;
	
	int testTimes = 10000000;
	
	public static void main(String[] args) {
		
		int value = 1000;
		int limit = 100;
		int testTimes = 1000000;
		for(int i = 0; i<testTimes; i++) {
			int curLimit = (int) (Math.random() * limit) + 1;
			MyMaxHeap my = new MyMaxHeap(curLimit);
			RightMaxHeap test = new RightMaxHeap(curLimit);
			int curOpTimes = (int) (Math.random() * limit);
			for(int j = 0; j < curOpTimes; j++) {
				if(my.isEmpty() != test.isEmpty()) {
					System.out.println("sth wrong");
				}
				if(my.isFull() != test.isFull()) {
					System.out.println("sth wrong");
				}
				if(my.isEmpty()) {
					int curValue = (int)(Math.random() * value);
					my.push(curValue);
					test.push(curValue);
					
				} else if(my.isFull()) {
					if(my.pop() != test.pop()) {
						System.out.println("sth wrong");
					}
				} else {
					if(Math.random() < 0.5) {
						int curValue = (int) (Math.random() * value);
						my.push(curValue);
						test.push(curValue);
					} else {
						if(my.pop() != test.pop()) {
							System.out.println("sth wrong");
						}
					}
				}
			}
			
		}
		System.out.println("Finish!");
	}
	
}
