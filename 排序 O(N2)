package com.ruiheng.alglee.sort;

public class Sort {
	
	public static void selectionSort(int[] arr) {
		
		if(arr == null || arr.length < 2) {
			return;
		}
		
		for(int i = 0; i< arr.length; i++ ) {
			int minIndex = i; 
			
			for(int j = i + 1; j < arr.length; j++) {
				minIndex = arr[j] < arr[minIndex] ? j : minIndex;
			}
			swap(arr, i, minIndex);
		}
	}
	
	public static void bubbleSort(int[] arr) {
		
		if(arr == null || arr.length < 2) {
			return;
		}
		
		for(int end = arr.length; end > 0; end--) {
			for(int i = 0; i<end; i++) {
				if(arr[i] > arr[i+1])
				swap(arr, i, i+1);
			}
		}
	}
	
	//插入排序很受数据状况
	//比如说数组原来就有序 对插入排序最友好 这种情况下插入排序就花了 O(n) 
	//但是逆序的时候   对插入排序最不友好   是 1 + 2 + 3 + 4 + n 次 O(n^2)
	//但是我们一般假设最坏的情况  就是  O(n^2) 
	
	public static void insertSort(int[] arr) {
		
		if(arr == null || arr.length < 2) {
			return;
		}
		
		// 0 - 0有序
		// 0 - 1 有序
		// 0 - 2 有序
		// ...
		// 0  --  N-1 有序
		for(int i = 1; i < arr.length; i++) {
			for(int j = i - 1; j>=0 && arr[j] > arr[j+1]; j--) {
				swap(arr, i, j);
			}
		}			
	}

	private static void swap(int[] arr, int i, int j) {
		// TODO Auto-generated method stub
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}
