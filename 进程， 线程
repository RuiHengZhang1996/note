进程， 是资源分配的基本单位，静态的概念，basic unit for resource distribution

线程， 是调度执行的基本单位，动态的概念


main函数是主线程，进程里第一个启动的线程

我们只要不启用新的线程，那就是单线程的程序



----------------------------------------------------


计算机由cpu  内存组成



应用程序qq， 双击就会放入内存里，执行内存中的qq进程的时候， 把qq的数据和指令放入cpu内，数据放在寄存器里registers， 指令放入pc program counter程序计数器里，然后cpu调
用计算单元alu arithmetic and logic unit ALU 进行计算。 计算后放入registers。


线程调度OS   

有一个cache

一个cpu核来说， 重要的有 Registers， PC， ALU， 对于线程来说，他有好几条指令，用到好多数据，他执行的时候，他就把指令和数据放入cpu里，线程暂时不要的时候，就把线程1放入
cache，用来记录线程1 现在的状态，现在他在用什么数据，算哪条指令，必须保存好， 也就是保存现场，等他待会儿回来的时候恢复现场，线程1进入cache里，执行线程2，

cpu只会计算，别的啥都不会， 具体哪个线程执行多久换，是操作系统os操心的事情。 os有一个线程调度器，平分时间片算法呀，之类的。该谁执行，执行多久，线程调度器决定。

CPU：你扔给我谁，我就执行谁。 工具人

线程切换也会消耗计算资源，会花一点时间。




那工作线程数是不是设置的越大越好？？ 

因为上面那句话： 线程切换也会消耗计算资源，会花时间，所以并不是，现在系统可以跑10个线程，但是如果有10w个线程，那就是不现实的。时间都花在切换上了，cpu对线程是公平的


那么工作线程数（线程池中线程数量）设置多少合适呢？？



那调用sleep方法是不是一直占用cpu呢？ 
首先要明白并不是所有线程都消耗cpu， 线程a要等待网络上传过来的文件，等待的过程是不消耗的，但是要是一直计算中，就在消耗资源。

所以线程分为两种时间： 1. 消耗cpu的时间 。 2. 不消耗cpu的时间。 

那我们要高效使用cpu就最好在线程1不消耗cpu的时候执行线程2. 这样对系统性能是最优的。

比如说1：1， 一半时间消耗cpu，一半时间不消耗。 假如说有1个核，设置两个线程就可以讲这个cpu压榨到100%。 假如有两个核，四个线程就可以100%。

那怎么知道比例1:1的呢？用profiler，各种各样的工具。

可能会有歧义的小概念： 超线程是啥？ 线程撕裂者

一颗cpu里面可能有几个核，假如说有两个核，有两个核就可以同时执行两个线程，

有的人说双核四线程，就是线程撕裂者

cpu里有个alu， 需要有registers（r）， pc。 线程撕裂者指的是， 一个alu对应多个 r + pc 组合。 

为啥这样设计，从内存拿比只在cpu里跑要慢100倍。





