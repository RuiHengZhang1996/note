 微服务架构： 
 
 三个不同的module 
 
 第一个service 用 8001 接口启动
 
 第二个用 8002 
 
 第三个 用 8003 
 
 这三个就是三个服务
 
 而微服务是一种架构风格 ------------------>>>>> 每个服务运行在自己的独立进程中，每个服务互相不受影响--------->>>>>> 服务间用轻量级协议进行通信
 
 
 之前的java web 项目里，里面写各个的类，建一个项目，里面写所有代码，这叫单体架构(monopolith)， 如果功能模块很多， 代码量会很大，而我们现在可以把一个项目拆分成多个独立
 的服务。
 
 综上所述就是： 微服务为了程序扩展方便，把一个项目拆分成多个独立的服务， 多个服务独立运行，每个服务独立进程。
 
 
 这样做的好处：
 
 每个服务功能独立，在项目部署的时候，可以单独进行部署，一个服务器service 1， 一个服务器 service2， 另一个service3。 
 
 微服务每个模块都可以用不一样的存储方式
 
 每个模块可以用不一样的语言
 
 外包的时候很方便
 
 
 
 那什么样的项目适合微服务呢？ 
 
 如果多个模块都可以独立运行，那就适合微服务
 
 但是那种特别底层的项目， 操作系统，存储系统之类的，功能与功能之间配合关系很紧密，那就不适合做微服务。
 
 
 
 微服务开发框架： 
 
 spring cloud， dubbo
 
 
 
 那spring cloud 是啥？ 
 
 不是一种技术： 是很多技术的总称， 集合： 使用spring cloud的框架可以实现微服务的操作。 
 
 
 spring boot &  spring cloud 
 
 
 springboot 是 spring的一套快速配置脚手架，可以基于spring boot 快速开发单个微服务，spring boot关注快速集成单个微服务
 
 而 
 
 spring cloud 是一个基于spring boot 实现的开发工具，spring cloud关注全局的服务治理框架
 
 基础组件如： 
 
 服务发现（注册）：Netflix euraka， nacos， zookeeper： 
 服务调用：feign
 熔断器： Hystrix
 服务网关： spring cloud gateway
 分布式配置：spring cloud config
 消息总线： spring cloud bus
 
 
 
 微服务的调用： 通过service2 调用 service1 的方法。 
 
 不能引入dependency，引入了就不叫微服务了。 
 
 所以使用一个注册中心来实现。
 
 将service1和service2都注册进去。 （像一个房产中介，是一个service1和service2的桥梁）
 通过1调用2，一下子肯定不能直接调到。 
 所以需要nacos。nacos见下一个笔记吧。
 
